// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	stm "github.com/fdelbos/stm"
	mock "github.com/stretchr/testify/mock"
)

// StmState is an autogenerated mock type for the State type
type StmState struct {
	mock.Mock
}

// Init provides a mock function with given fields:
func (_m *StmState) Init() stm.Cmd {
	ret := _m.Called()

	var r0 stm.Cmd
	if rf, ok := ret.Get(0).(func() stm.Cmd); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stm.Cmd)
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *StmState) Update(_a0 stm.Msg) (stm.State, stm.Cmd) {
	ret := _m.Called(_a0)

	var r0 stm.State
	var r1 stm.Cmd
	if rf, ok := ret.Get(0).(func(stm.Msg) (stm.State, stm.Cmd)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(stm.Msg) stm.State); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stm.State)
		}
	}

	if rf, ok := ret.Get(1).(func(stm.Msg) stm.Cmd); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(stm.Cmd)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewStmState interface {
	mock.TestingT
	Cleanup(func())
}

// NewStmState creates a new instance of StmState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStmState(t mockConstructorTestingTNewStmState) *StmState {
	mock := &StmState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
